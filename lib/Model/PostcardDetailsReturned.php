<?php
/**
 * PostcardDetailsReturned
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostcardDetailsReturned Class Doc Comment
 *
 * @category Class
 * @description Properties that the postcards in your Creative should have.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PostcardDetailsReturned implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'postcard_details_returned';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mail_type' => '\OpenAPI\Client\Model\MailType',
        'size' => '\OpenAPI\Client\Model\PostcardSize',
        'setting' => 'int',
        'front_original_url' => 'string',
        'back_original_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mail_type' => null,
        'size' => null,
        'setting' => null,
        'front_original_url' => 'uri',
        'back_original_url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mail_type' => 'mail_type',
        'size' => 'size',
        'setting' => 'setting',
        'front_original_url' => 'front_original_url',
        'back_original_url' => 'back_original_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mail_type' => 'setMailType',
        'size' => 'setSize',
        'setting' => 'setSetting',
        'front_original_url' => 'setFrontOriginalUrl',
        'back_original_url' => 'setBackOriginalUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mail_type' => 'getMailType',
        'size' => 'getSize',
        'setting' => 'getSetting',
        'front_original_url' => 'getFrontOriginalUrl',
        'back_original_url' => 'getBackOriginalUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mail_type'] = $data['mail_type'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['setting'] = $data['setting'] ?? null;
        $this->container['front_original_url'] = $data['front_original_url'] ?? null;
        $this->container['back_original_url'] = $data['back_original_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['front_original_url']) && (mb_strlen($this->container['front_original_url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'front_original_url', the character length must be smaller than or equal to 2083.";
            }

            if (!is_null($this->container['front_original_url']) && (mb_strlen($this->container['front_original_url']) < 1)) {
                $invalidProperties[] = "invalid value for 'front_original_url', the character length must be bigger than or equal to 1.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['back_original_url']) && (mb_strlen($this->container['back_original_url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'back_original_url', the character length must be smaller than or equal to 2083.";
            }

            if (!is_null($this->container['back_original_url']) && (mb_strlen($this->container['back_original_url']) < 1)) {
                $invalidProperties[] = "invalid value for 'back_original_url', the character length must be bigger than or equal to 1.";
            }

        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets mail_type
     *
     * @return \OpenAPI\Client\Model\MailType|null
     */
    public function getMailType()
    {
        return $this->container['mail_type'];
    }

    /**
     * Sets mail_type
     *
     * @param \OpenAPI\Client\Model\MailType|null $mail_type mail_type
     *
     * @return self
     */
    public function setMailType($mail_type)
    {
        $this->container['mail_type'] = $mail_type;

        return $this;
    }


    /**
     * Gets size
     *
     * @return \OpenAPI\Client\Model\PostcardSize|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \OpenAPI\Client\Model\PostcardSize|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }


    /**
     * Gets setting
     *
     * @return int|null
     */
    public function getSetting()
    {
        return $this->container['setting'];
    }

    /**
     * Sets setting
     *
     * @param int|null $setting setting
     *
     * @return self
     */
    public function setSetting($setting)
    {
        $this->container['setting'] = $setting;

        return $this;
    }


    /**
     * Gets front_original_url
     *
     * @return string|null
     */
    public function getFrontOriginalUrl()
    {
        return $this->container['front_original_url'];
    }

    /**
     * Sets front_original_url
     *
     * @param string|null $front_original_url The original URL of the front template.
     *
     * @return self
     */
    public function setFrontOriginalUrl($front_original_url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($front_original_url) && (mb_strlen($front_original_url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $front_original_url when calling PostcardDetailsReturned., must be smaller than or equal to 2083.');
            }
            if (!is_null($front_original_url) && (mb_strlen($front_original_url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $front_original_url when calling PostcardDetailsReturned., must be bigger than or equal to 1.');
            }

        }
        $this->container['front_original_url'] = $front_original_url;

        return $this;
    }


    /**
     * Gets back_original_url
     *
     * @return string|null
     */
    public function getBackOriginalUrl()
    {
        return $this->container['back_original_url'];
    }

    /**
     * Sets back_original_url
     *
     * @param string|null $back_original_url The original URL of the back template.
     *
     * @return self
     */
    public function setBackOriginalUrl($back_original_url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($back_original_url) && (mb_strlen($back_original_url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $back_original_url when calling PostcardDetailsReturned., must be smaller than or equal to 2083.');
            }
            if (!is_null($back_original_url) && (mb_strlen($back_original_url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $back_original_url when calling PostcardDetailsReturned., must be bigger than or equal to 1.');
            }

        }
        $this->container['back_original_url'] = $back_original_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


