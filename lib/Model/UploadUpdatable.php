<?php
/**
 * UploadUpdatable
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UploadUpdatable Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UploadUpdatable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'upload_updatable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'original_filename' => 'string',
        'required_address_column_mapping' => '\OpenAPI\Client\Model\RequiredAddressColumnMapping',
        'optional_address_column_mapping' => '\OpenAPI\Client\Model\OptionalAddressColumnMapping',
        'metadata' => '\OpenAPI\Client\Model\UploadsMetadata',
        'merge_variable_column_mapping' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'original_filename' => null,
        'required_address_column_mapping' => null,
        'optional_address_column_mapping' => null,
        'metadata' => null,
        'merge_variable_column_mapping' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'original_filename' => 'originalFilename',
        'required_address_column_mapping' => 'requiredAddressColumnMapping',
        'optional_address_column_mapping' => 'optionalAddressColumnMapping',
        'metadata' => 'metadata',
        'merge_variable_column_mapping' => 'mergeVariableColumnMapping'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'original_filename' => 'setOriginalFilename',
        'required_address_column_mapping' => 'setRequiredAddressColumnMapping',
        'optional_address_column_mapping' => 'setOptionalAddressColumnMapping',
        'metadata' => 'setMetadata',
        'merge_variable_column_mapping' => 'setMergeVariableColumnMapping'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'original_filename' => 'getOriginalFilename',
        'required_address_column_mapping' => 'getRequiredAddressColumnMapping',
        'optional_address_column_mapping' => 'getOptionalAddressColumnMapping',
        'metadata' => 'getMetadata',
        'merge_variable_column_mapping' => 'getMergeVariableColumnMapping'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_filename'] = $data['original_filename'] ?? null;
        $this->container['required_address_column_mapping'] = $data['required_address_column_mapping'] ?? null;
        $this->container['optional_address_column_mapping'] = $data['optional_address_column_mapping'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['merge_variable_column_mapping'] = $data['merge_variable_column_mapping'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets original_filename
     *
     * @return string|null
     */
    public function getOriginalFilename()
    {
        return $this->container['original_filename'];
    }

    /**
     * Sets original_filename
     *
     * @param string|null $original_filename Original filename provided when the upload is created.
     *
     * @return self
     */
    public function setOriginalFilename($original_filename)
    {
        $this->container['original_filename'] = $original_filename;

        return $this;
    }


    /**
     * Gets required_address_column_mapping
     *
     * @return \OpenAPI\Client\Model\RequiredAddressColumnMapping|null
     */
    public function getRequiredAddressColumnMapping()
    {
        return $this->container['required_address_column_mapping'];
    }

    /**
     * Sets required_address_column_mapping
     *
     * @param \OpenAPI\Client\Model\RequiredAddressColumnMapping|null $required_address_column_mapping required_address_column_mapping
     *
     * @return self
     */
    public function setRequiredAddressColumnMapping($required_address_column_mapping)
    {
        $this->container['required_address_column_mapping'] = $required_address_column_mapping;

        return $this;
    }


    /**
     * Gets optional_address_column_mapping
     *
     * @return \OpenAPI\Client\Model\OptionalAddressColumnMapping|null
     */
    public function getOptionalAddressColumnMapping()
    {
        return $this->container['optional_address_column_mapping'];
    }

    /**
     * Sets optional_address_column_mapping
     *
     * @param \OpenAPI\Client\Model\OptionalAddressColumnMapping|null $optional_address_column_mapping optional_address_column_mapping
     *
     * @return self
     */
    public function setOptionalAddressColumnMapping($optional_address_column_mapping)
    {
        $this->container['optional_address_column_mapping'] = $optional_address_column_mapping;

        return $this;
    }


    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\UploadsMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\UploadsMetadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }


    /**
     * Gets merge_variable_column_mapping
     *
     * @return object|null
     */
    public function getMergeVariableColumnMapping()
    {
        return $this->container['merge_variable_column_mapping'];
    }

    /**
     * Sets merge_variable_column_mapping
     *
     * @param object|null $merge_variable_column_mapping The mapping of column headers in your file to the merge variables present in your creative. See our <a href=\"https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\" target=\"_blank\">Campaign Audience Guide</a> for additional details. <br />If a merge variable has the same \"name\" as a \"key\" in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects.
     *
     * @return self
     */
    public function setMergeVariableColumnMapping($merge_variable_column_mapping)
    {
        $this->container['merge_variable_column_mapping'] = $merge_variable_column_mapping;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


