<?php
/**
 * Buckslip
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Buckslip Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Buckslip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'buckslip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'auto_reorder' => 'bool',
        'reorder_quantity' => 'int',
        'threshold_amount' => 'int',
        'url' => 'string',
        'raw_url' => 'string',
        'front_original_url' => 'string',
        'back_original_url' => 'string',
        'thumbnails' => '\OpenAPI\Client\Model\Thumbnail[]',
        'available_quantity' => 'float',
        'allocated_quantity' => 'float',
        'onhand_quantity' => 'float',
        'pending_quantity' => 'float',
        'projected_quantity' => 'float',
        'buckslip_orders' => '\OpenAPI\Client\Model\BuckslipOrder[]',
        'stock' => 'string',
        'weight' => 'string',
        'finish' => 'string',
        'status' => 'string',
        'object' => 'string',
        'description' => 'string',
        'size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'auto_reorder' => null,
        'reorder_quantity' => null,
        'threshold_amount' => null,
        'url' => 'uri',
        'raw_url' => 'uri',
        'front_original_url' => 'uri',
        'back_original_url' => 'uri',
        'thumbnails' => null,
        'available_quantity' => null,
        'allocated_quantity' => null,
        'onhand_quantity' => null,
        'pending_quantity' => null,
        'projected_quantity' => null,
        'buckslip_orders' => null,
        'stock' => null,
        'weight' => null,
        'finish' => null,
        'status' => null,
        'object' => null,
        'description' => null,
        'size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'auto_reorder' => 'auto_reorder',
        'reorder_quantity' => 'reorder_quantity',
        'threshold_amount' => 'threshold_amount',
        'url' => 'url',
        'raw_url' => 'raw_url',
        'front_original_url' => 'front_original_url',
        'back_original_url' => 'back_original_url',
        'thumbnails' => 'thumbnails',
        'available_quantity' => 'available_quantity',
        'allocated_quantity' => 'allocated_quantity',
        'onhand_quantity' => 'onhand_quantity',
        'pending_quantity' => 'pending_quantity',
        'projected_quantity' => 'projected_quantity',
        'buckslip_orders' => 'buckslip_orders',
        'stock' => 'stock',
        'weight' => 'weight',
        'finish' => 'finish',
        'status' => 'status',
        'object' => 'object',
        'description' => 'description',
        'size' => 'size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'auto_reorder' => 'setAutoReorder',
        'reorder_quantity' => 'setReorderQuantity',
        'threshold_amount' => 'setThresholdAmount',
        'url' => 'setUrl',
        'raw_url' => 'setRawUrl',
        'front_original_url' => 'setFrontOriginalUrl',
        'back_original_url' => 'setBackOriginalUrl',
        'thumbnails' => 'setThumbnails',
        'available_quantity' => 'setAvailableQuantity',
        'allocated_quantity' => 'setAllocatedQuantity',
        'onhand_quantity' => 'setOnhandQuantity',
        'pending_quantity' => 'setPendingQuantity',
        'projected_quantity' => 'setProjectedQuantity',
        'buckslip_orders' => 'setBuckslipOrders',
        'stock' => 'setStock',
        'weight' => 'setWeight',
        'finish' => 'setFinish',
        'status' => 'setStatus',
        'object' => 'setObject',
        'description' => 'setDescription',
        'size' => 'setSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'auto_reorder' => 'getAutoReorder',
        'reorder_quantity' => 'getReorderQuantity',
        'threshold_amount' => 'getThresholdAmount',
        'url' => 'getUrl',
        'raw_url' => 'getRawUrl',
        'front_original_url' => 'getFrontOriginalUrl',
        'back_original_url' => 'getBackOriginalUrl',
        'thumbnails' => 'getThumbnails',
        'available_quantity' => 'getAvailableQuantity',
        'allocated_quantity' => 'getAllocatedQuantity',
        'onhand_quantity' => 'getOnhandQuantity',
        'pending_quantity' => 'getPendingQuantity',
        'projected_quantity' => 'getProjectedQuantity',
        'buckslip_orders' => 'getBuckslipOrders',
        'stock' => 'getStock',
        'weight' => 'getWeight',
        'finish' => 'getFinish',
        'status' => 'getStatus',
        'object' => 'getObject',
        'description' => 'getDescription',
        'size' => 'getSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STOCK_TEXT = 'text';
    const STOCK_COVER = 'cover';
    const WEIGHT__80 = '80#';
    const FINISH_GLOSS = 'gloss';
    const FINISH_MATTE = 'matte';
    const STATUS_PROCESSED = 'processed';
    const STATUS_RENDERED = 'rendered';
    const OBJECT_BUCKSLIP = 'buckslip';
    const SIZE__8_75X3_75 = '8.75x3.75';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockAllowableValues()
    {
        return [
            self::STOCK_TEXT,
            self::STOCK_COVER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightAllowableValues()
    {
        return [
            self::WEIGHT__80,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinishAllowableValues()
    {
        return [
            self::FINISH_GLOSS,
            self::FINISH_MATTE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PROCESSED,
            self::STATUS_RENDERED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_BUCKSLIP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeAllowableValues()
    {
        return [
            self::SIZE__8_75X3_75,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['auto_reorder'] = $data['auto_reorder'] ?? null;
        $this->container['reorder_quantity'] = $data['reorder_quantity'] ?? null;
        $this->container['threshold_amount'] = $data['threshold_amount'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['raw_url'] = $data['raw_url'] ?? null;
        $this->container['front_original_url'] = $data['front_original_url'] ?? null;
        $this->container['back_original_url'] = $data['back_original_url'] ?? null;
        $this->container['thumbnails'] = $data['thumbnails'] ?? null;
        $this->container['available_quantity'] = $data['available_quantity'] ?? null;
        $this->container['allocated_quantity'] = $data['allocated_quantity'] ?? null;
        $this->container['onhand_quantity'] = $data['onhand_quantity'] ?? null;
        $this->container['pending_quantity'] = $data['pending_quantity'] ?? null;
        $this->container['projected_quantity'] = $data['projected_quantity'] ?? null;
        $this->container['buckslip_orders'] = $data['buckslip_orders'] ?? null;
        $this->container['stock'] = $data['stock'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['finish'] = $data['finish'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['object'] = $data['object'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['id'] === null) {
                $invalidProperties[] = "'id' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!preg_match("/^bck_[a-zA-Z0-9]+$/", $this->container['id'])) {
                $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^bck_[a-zA-Z0-9]+$/.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['auto_reorder'] === null) {
                $invalidProperties[] = "'auto_reorder' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['reorder_quantity'] === null) {
                $invalidProperties[] = "'reorder_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['threshold_amount'] === null) {
                $invalidProperties[] = "'threshold_amount' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['url'] === null) {
                $invalidProperties[] = "'url' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($this->container['url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 2083.";
            }

            if ((mb_strlen($this->container['url']) < 1)) {
                $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 1.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['raw_url'] === null) {
                $invalidProperties[] = "'raw_url' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($this->container['raw_url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'raw_url', the character length must be smaller than or equal to 2083.";
            }

            if ((mb_strlen($this->container['raw_url']) < 1)) {
                $invalidProperties[] = "invalid value for 'raw_url', the character length must be bigger than or equal to 1.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['front_original_url'] === null) {
                $invalidProperties[] = "'front_original_url' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($this->container['front_original_url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'front_original_url', the character length must be smaller than or equal to 2083.";
            }

            if ((mb_strlen($this->container['front_original_url']) < 1)) {
                $invalidProperties[] = "invalid value for 'front_original_url', the character length must be bigger than or equal to 1.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['back_original_url'] === null) {
                $invalidProperties[] = "'back_original_url' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($this->container['back_original_url']) > 2083)) {
                $invalidProperties[] = "invalid value for 'back_original_url', the character length must be smaller than or equal to 2083.";
            }

            if ((mb_strlen($this->container['back_original_url']) < 1)) {
                $invalidProperties[] = "invalid value for 'back_original_url', the character length must be bigger than or equal to 1.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['thumbnails'] === null) {
                $invalidProperties[] = "'thumbnails' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['available_quantity'] === null) {
                $invalidProperties[] = "'available_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['allocated_quantity'] === null) {
                $invalidProperties[] = "'allocated_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['onhand_quantity'] === null) {
                $invalidProperties[] = "'onhand_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['pending_quantity'] === null) {
                $invalidProperties[] = "'pending_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['projected_quantity'] === null) {
                $invalidProperties[] = "'projected_quantity' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['buckslip_orders'] === null) {
                $invalidProperties[] = "'buckslip_orders' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((count($this->container['buckslip_orders']) < 0)) {
                $invalidProperties[] = "invalid value for 'buckslip_orders', number of items must be greater than or equal to 0.";
            }

        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['stock'] === null) {
                $invalidProperties[] = "'stock' can't be null";
            }
        }
        $allowedValues = $this->getStockAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['stock']) && !in_array($this->container['stock'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'stock', must be one of '%s'",
                    $this->container['stock'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['weight'] === null) {
                $invalidProperties[] = "'weight' can't be null";
            }
        }
        $allowedValues = $this->getWeightAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['weight']) && !in_array($this->container['weight'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'weight', must be one of '%s'",
                    $this->container['weight'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['finish'] === null) {
                $invalidProperties[] = "'finish' can't be null";
            }
        }
        $allowedValues = $this->getFinishAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['finish']) && !in_array($this->container['finish'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'finish', must be one of '%s'",
                    $this->container['finish'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['status'] === null) {
                $invalidProperties[] = "'status' can't be null";
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'status', must be one of '%s'",
                    $this->container['status'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['object'] === null) {
                $invalidProperties[] = "'object' can't be null";
            }
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'object', must be one of '%s'",
                    $this->container['object'],
                    implode("', '", $allowedValues)
                );
            }
        }

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['description'] === null) {
                $invalidProperties[] = "'description' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($this->container['description']) > 255)) {
                $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
            }

        }
        $allowedValues = $this->getSizeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['size']) && !in_array($this->container['size'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'size', must be one of '%s'",
                    $this->container['size'],
                    implode("', '", $allowedValues)
                );
            }
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier prefixed with `bck_`.
     *
     * @return self
     */
    public function setId($id)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {

            if ((!preg_match("/^bck_[a-zA-Z0-9]+$/", $id))) {
                throw new \InvalidArgumentException("invalid value for $id when calling Buckslip., must conform to the pattern /^bck_[a-zA-Z0-9]+$/.");
            }

        }
        $this->container['id'] = $id;

        return $this;
    }


    /**
     * Gets auto_reorder
     *
     * @return bool
     */
    public function getAutoReorder()
    {
        return $this->container['auto_reorder'];
    }

    /**
     * Sets auto_reorder
     *
     * @param bool $auto_reorder True if the buckslips should be auto-reordered.
     *
     * @return self
     */
    public function setAutoReorder($auto_reorder)
    {
        $this->container['auto_reorder'] = $auto_reorder;

        return $this;
    }


    /**
     * Gets reorder_quantity
     *
     * @return int
     */
    public function getReorderQuantity()
    {
        return $this->container['reorder_quantity'];
    }

    /**
     * Sets reorder_quantity
     *
     * @param int $reorder_quantity The number of buckslips to be reordered.
     *
     * @return self
     */
    public function setReorderQuantity($reorder_quantity)
    {
        $this->container['reorder_quantity'] = $reorder_quantity;

        return $this;
    }


    /**
     * Gets threshold_amount
     *
     * @return int
     */
    public function getThresholdAmount()
    {
        return $this->container['threshold_amount'];
    }

    /**
     * Sets threshold_amount
     *
     * @param int $threshold_amount The threshold amount of the buckslip
     *
     * @return self
     */
    public function setThresholdAmount($threshold_amount)
    {
        $this->container['threshold_amount'] = $threshold_amount;

        return $this;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The signed link for the buckslip.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $url when calling Buckslip., must be smaller than or equal to 2083.');
            }
            if ((mb_strlen($url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $url when calling Buckslip., must be bigger than or equal to 1.');
            }

        }
        $this->container['url'] = $url;

        return $this;
    }


    /**
     * Gets raw_url
     *
     * @return string
     */
    public function getRawUrl()
    {
        return $this->container['raw_url'];
    }

    /**
     * Sets raw_url
     *
     * @param string $raw_url The raw URL of the buckslip.
     *
     * @return self
     */
    public function setRawUrl($raw_url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($raw_url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $raw_url when calling Buckslip., must be smaller than or equal to 2083.');
            }
            if ((mb_strlen($raw_url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $raw_url when calling Buckslip., must be bigger than or equal to 1.');
            }

        }
        $this->container['raw_url'] = $raw_url;

        return $this;
    }


    /**
     * Gets front_original_url
     *
     * @return string
     */
    public function getFrontOriginalUrl()
    {
        return $this->container['front_original_url'];
    }

    /**
     * Sets front_original_url
     *
     * @param string $front_original_url The original URL of the front template.
     *
     * @return self
     */
    public function setFrontOriginalUrl($front_original_url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($front_original_url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $front_original_url when calling Buckslip., must be smaller than or equal to 2083.');
            }
            if ((mb_strlen($front_original_url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $front_original_url when calling Buckslip., must be bigger than or equal to 1.');
            }

        }
        $this->container['front_original_url'] = $front_original_url;

        return $this;
    }


    /**
     * Gets back_original_url
     *
     * @return string
     */
    public function getBackOriginalUrl()
    {
        return $this->container['back_original_url'];
    }

    /**
     * Sets back_original_url
     *
     * @param string $back_original_url The original URL of the back template.
     *
     * @return self
     */
    public function setBackOriginalUrl($back_original_url)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($back_original_url) > 2083)) {
                throw new \InvalidArgumentException('invalid length for $back_original_url when calling Buckslip., must be smaller than or equal to 2083.');
            }
            if ((mb_strlen($back_original_url) < 1)) {
                throw new \InvalidArgumentException('invalid length for $back_original_url when calling Buckslip., must be bigger than or equal to 1.');
            }

        }
        $this->container['back_original_url'] = $back_original_url;

        return $this;
    }


    /**
     * Gets thumbnails
     *
     * @return \OpenAPI\Client\Model\Thumbnail[]
     */
    public function getThumbnails()
    {
        return $this->container['thumbnails'];
    }

    /**
     * Sets thumbnails
     *
     * @param \OpenAPI\Client\Model\Thumbnail[] $thumbnails thumbnails
     *
     * @return self
     */
    public function setThumbnails($thumbnails)
    {
        $this->container['thumbnails'] = [];
        if ($thumbnails) {
            foreach ($thumbnails as $point) {
                $deserializedData = ObjectSerializer::deserialize($point, '\OpenAPI\Client\Model\Thumbnail', []);
                
                array_push($this->container['thumbnails'], $deserializedData);
            }
        }

        return $this;
    }


    /**
     * Gets available_quantity
     *
     * @return float
     */
    public function getAvailableQuantity()
    {
        return $this->container['available_quantity'];
    }

    /**
     * Sets available_quantity
     *
     * @param float $available_quantity The available quantity of buckslips.
     *
     * @return self
     */
    public function setAvailableQuantity($available_quantity)
    {
        $this->container['available_quantity'] = $available_quantity;

        return $this;
    }


    /**
     * Gets allocated_quantity
     *
     * @return float
     */
    public function getAllocatedQuantity()
    {
        return $this->container['allocated_quantity'];
    }

    /**
     * Sets allocated_quantity
     *
     * @param float $allocated_quantity The allocated quantity of buckslips.
     *
     * @return self
     */
    public function setAllocatedQuantity($allocated_quantity)
    {
        $this->container['allocated_quantity'] = $allocated_quantity;

        return $this;
    }


    /**
     * Gets onhand_quantity
     *
     * @return float
     */
    public function getOnhandQuantity()
    {
        return $this->container['onhand_quantity'];
    }

    /**
     * Sets onhand_quantity
     *
     * @param float $onhand_quantity The onhand quantity of buckslips.
     *
     * @return self
     */
    public function setOnhandQuantity($onhand_quantity)
    {
        $this->container['onhand_quantity'] = $onhand_quantity;

        return $this;
    }


    /**
     * Gets pending_quantity
     *
     * @return float
     */
    public function getPendingQuantity()
    {
        return $this->container['pending_quantity'];
    }

    /**
     * Sets pending_quantity
     *
     * @param float $pending_quantity The pending quantity of buckslips.
     *
     * @return self
     */
    public function setPendingQuantity($pending_quantity)
    {
        $this->container['pending_quantity'] = $pending_quantity;

        return $this;
    }


    /**
     * Gets projected_quantity
     *
     * @return float
     */
    public function getProjectedQuantity()
    {
        return $this->container['projected_quantity'];
    }

    /**
     * Sets projected_quantity
     *
     * @param float $projected_quantity The sum of pending and onhand quantities of buckslips.
     *
     * @return self
     */
    public function setProjectedQuantity($projected_quantity)
    {
        $this->container['projected_quantity'] = $projected_quantity;

        return $this;
    }


    /**
     * Gets buckslip_orders
     *
     * @return \OpenAPI\Client\Model\BuckslipOrder[]
     */
    public function getBuckslipOrders()
    {
        return $this->container['buckslip_orders'];
    }

    /**
     * Sets buckslip_orders
     *
     * @param \OpenAPI\Client\Model\BuckslipOrder[] $buckslip_orders An array of buckslip orders that are associated with the buckslip.
     *
     * @return self
     */
    public function setBuckslipOrders($buckslip_orders)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {


            if ((count($buckslip_orders) < 0)) {
                throw new \InvalidArgumentException('invalid length for $buckslip_orders when calling Buckslip., number of items must be greater than or equal to 0.');
            }
        }
        $this->container['buckslip_orders'] = [];
        if ($buckslip_orders) {
            foreach ($buckslip_orders as $point) {
                $deserializedData = ObjectSerializer::deserialize($point, '\OpenAPI\Client\Model\BuckslipOrder', []);
                
                array_push($this->container['buckslip_orders'], $deserializedData);
            }
        }

        return $this;
    }


    /**
     * Gets stock
     *
     * @return string
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param string $stock stock
     *
     * @return self
     */
    public function setStock($stock)
    {
        $allowedValues = $this->getStockAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($stock, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'stock', must be one of '%s'",
                        $stock,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['stock'] = $stock;

        return $this;
    }


    /**
     * Gets weight
     *
     * @return string
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param string $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $allowedValues = $this->getWeightAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($weight, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'weight', must be one of '%s'",
                        $weight,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['weight'] = $weight;

        return $this;
    }


    /**
     * Gets finish
     *
     * @return string
     */
    public function getFinish()
    {
        return $this->container['finish'];
    }

    /**
     * Sets finish
     *
     * @param string $finish finish
     *
     * @return self
     */
    public function setFinish($finish)
    {
        $allowedValues = $this->getFinishAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($finish, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'finish', must be one of '%s'",
                        $finish,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['finish'] = $finish;

        return $this;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($status, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'status', must be one of '%s'",
                        $status,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['status'] = $status;

        return $this;
    }


    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        $allowedValues = $this->getObjectAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!in_array($object, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'object', must be one of '%s'",
                        $object,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['object'] = $object;

        return $this;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the buckslip.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((mb_strlen($description) > 255)) {
                throw new \InvalidArgumentException('invalid length for $description when calling Buckslip., must be smaller than or equal to 255.');
            }

        }
        $this->container['description'] = $description;

        return $this;
    }


    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size The size of the buckslip
     *
     * @return self
     */
    public function setSize($size)
    {
        $allowedValues = $this->getSizeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($size) && !in_array($size, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'size', must be one of '%s'",
                        $size,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['size'] = $size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


