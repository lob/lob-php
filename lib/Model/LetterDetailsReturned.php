<?php
/**
 * LetterDetailsReturned
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LetterDetailsReturned Class Doc Comment
 *
 * @category Class
 * @description Properties that the letters in your Creative should have.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LetterDetailsReturned implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'letter_details_returned';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'color' => 'bool',
        'cards' => 'string[]',
        'address_placement' => 'string',
        'custom_envelope' => '\OpenAPI\Client\Model\CustomEnvelopeReturned',
        'double_sided' => 'bool',
        'extra_service' => 'string',
        'mail_type' => '\OpenAPI\Client\Model\MailType',
        'return_envelope' => 'mixed',
        'bleed' => 'bool',
        'file_original_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'color' => null,
        'cards' => null,
        'address_placement' => null,
        'custom_envelope' => null,
        'double_sided' => null,
        'extra_service' => null,
        'mail_type' => null,
        'return_envelope' => null,
        'bleed' => null,
        'file_original_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'color' => 'color',
        'cards' => 'cards',
        'address_placement' => 'address_placement',
        'custom_envelope' => 'custom_envelope',
        'double_sided' => 'double_sided',
        'extra_service' => 'extra_service',
        'mail_type' => 'mail_type',
        'return_envelope' => 'return_envelope',
        'bleed' => 'bleed',
        'file_original_url' => 'file_original_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'color' => 'setColor',
        'cards' => 'setCards',
        'address_placement' => 'setAddressPlacement',
        'custom_envelope' => 'setCustomEnvelope',
        'double_sided' => 'setDoubleSided',
        'extra_service' => 'setExtraService',
        'mail_type' => 'setMailType',
        'return_envelope' => 'setReturnEnvelope',
        'bleed' => 'setBleed',
        'file_original_url' => 'setFileOriginalUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'color' => 'getColor',
        'cards' => 'getCards',
        'address_placement' => 'getAddressPlacement',
        'custom_envelope' => 'getCustomEnvelope',
        'double_sided' => 'getDoubleSided',
        'extra_service' => 'getExtraService',
        'mail_type' => 'getMailType',
        'return_envelope' => 'getReturnEnvelope',
        'bleed' => 'getBleed',
        'file_original_url' => 'getFileOriginalUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ADDRESS_PLACEMENT_TOP_FIRST_PAGE = 'top_first_page';
    const ADDRESS_PLACEMENT_INSERT_BLANK_PAGE = 'insert_blank_page';
    const ADDRESS_PLACEMENT_BOTTOM_FIRST_PAGE_CENTER = 'bottom_first_page_center';
    const ADDRESS_PLACEMENT_BOTTOM_FIRST_PAGE = 'bottom_first_page';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressPlacementAllowableValues()
    {
        return [
            self::ADDRESS_PLACEMENT_TOP_FIRST_PAGE,
            self::ADDRESS_PLACEMENT_INSERT_BLANK_PAGE,
            self::ADDRESS_PLACEMENT_BOTTOM_FIRST_PAGE_CENTER,
            self::ADDRESS_PLACEMENT_BOTTOM_FIRST_PAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['color'] = $data['color'] ?? null;
        $this->container['cards'] = $data['cards'] ?? null;
        $this->container['address_placement'] = $data['address_placement'] ?? null;
        $this->container['custom_envelope'] = $data['custom_envelope'] ?? null;
        $this->container['double_sided'] = $data['double_sided'] ?? null;
        $this->container['extra_service'] = $data['extra_service'] ?? null;
        $this->container['mail_type'] = $data['mail_type'] ?? null;
        $this->container['return_envelope'] = $data['return_envelope'] ?? null;
        $this->container['bleed'] = $data['bleed'] ?? null;
        $this->container['file_original_url'] = $data['file_original_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['color'] === null) {
                $invalidProperties[] = "'color' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ($this->container['cards'] === null) {
                $invalidProperties[] = "'cards' can't be null";
            }
        }
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if ((count($this->container['cards']) > 1)) {
                $invalidProperties[] = "invalid value for 'cards', number of items must be less than or equal to 1.";
            }

            if ((count($this->container['cards']) < 0)) {
                $invalidProperties[] = "invalid value for 'cards', number of items must be greater than or equal to 0.";
            }

        }
        $allowedValues = $this->getAddressPlacementAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['address_placement']) && !in_array($this->container['address_placement'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'address_placement', must be one of '%s'",
                    $this->container['address_placement'],
                    implode("', '", $allowedValues)
                );
            }
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets color
     *
     * @return bool
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param bool $color Set this key to `true` if you would like to print in color, false for black and white.
     *
     * @return self
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }


    /**
     * Gets cards
     *
     * @return string[]
     */
    public function getCards()
    {
        return $this->container['cards'];
    }

    /**
     * Sets cards
     *
     * @param string[] $cards A single-element array containing an existing card id in a string format. See [cards](#tag/Cards) for more information.
     *
     * @return self
     */
    public function setCards($cards)
    {
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {

            if ((count($cards) > 1)) {
                throw new \InvalidArgumentException('invalid value for $cards when calling LetterDetailsReturned., number of items must be less than or equal to 1.');
            }
            if ((count($cards) < 0)) {
                throw new \InvalidArgumentException('invalid length for $cards when calling LetterDetailsReturned., number of items must be greater than or equal to 0.');
            }
        }
        $this->container['cards'] = [];
        if ($cards) {
            foreach ($cards as $point) {
                
                $deserializedData = (string) $point;
                array_push($this->container['cards'], $deserializedData);
            }
        }

        return $this;
    }


    /**
     * Gets address_placement
     *
     * @return string|null
     */
    public function getAddressPlacement()
    {
        return $this->container['address_placement'];
    }

    /**
     * Sets address_placement
     *
     * @param string|null $address_placement Specifies the location of the address information that will show through the double-window envelope.
     *
     * @return self
     */
    public function setAddressPlacement($address_placement)
    {
        $allowedValues = $this->getAddressPlacementAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($address_placement) && !in_array($address_placement, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'address_placement', must be one of '%s'",
                        $address_placement,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['address_placement'] = $address_placement;

        return $this;
    }


    /**
     * Gets custom_envelope
     *
     * @return \OpenAPI\Client\Model\CustomEnvelopeReturned|null
     */
    public function getCustomEnvelope()
    {
        return $this->container['custom_envelope'];
    }

    /**
     * Sets custom_envelope
     *
     * @param \OpenAPI\Client\Model\CustomEnvelopeReturned|null $custom_envelope custom_envelope
     *
     * @return self
     */
    public function setCustomEnvelope($custom_envelope)
    {
        $this->container['custom_envelope'] = $custom_envelope;

        return $this;
    }


    /**
     * Gets double_sided
     *
     * @return bool|null
     */
    public function getDoubleSided()
    {
        return $this->container['double_sided'];
    }

    /**
     * Sets double_sided
     *
     * @param bool|null $double_sided Set this attribute to `true` for double sided printing,  `false` for for single sided printing.
     *
     * @return self
     */
    public function setDoubleSided($double_sided)
    {
        $this->container['double_sided'] = $double_sided;

        return $this;
    }


    /**
     * Gets extra_service
     *
     * @return string|null
     */
    public function getExtraService()
    {
        return $this->container['extra_service'];
    }

    /**
     * Sets extra_service
     *
     * @param string|null $extra_service Add an extra service to your letter.
     *
     * @return self
     */
    public function setExtraService($extra_service)
    {
        $this->container['extra_service'] = $extra_service;

        return $this;
    }


    /**
     * Gets mail_type
     *
     * @return \OpenAPI\Client\Model\MailType|null
     */
    public function getMailType()
    {
        return $this->container['mail_type'];
    }

    /**
     * Sets mail_type
     *
     * @param \OpenAPI\Client\Model\MailType|null $mail_type mail_type
     *
     * @return self
     */
    public function setMailType($mail_type)
    {
        $this->container['mail_type'] = $mail_type;

        return $this;
    }


    /**
     * Gets return_envelope
     *
     * @return mixed|null
     */
    public function getReturnEnvelope()
    {
        return $this->container['return_envelope'];
    }

    /**
     * Sets return_envelope
     *
     * @param mixed|null $return_envelope return_envelope
     *
     * @return self
     */
    public function setReturnEnvelope($return_envelope)
    {
        $this->container['return_envelope'] = $return_envelope;

        return $this;
    }


    /**
     * Gets bleed
     *
     * @return bool|null
     */
    public function getBleed()
    {
        return $this->container['bleed'];
    }

    /**
     * Sets bleed
     *
     * @param bool|null $bleed Allows for letter bleed. Enabled only with specific feature flags.
     *
     * @return self
     */
    public function setBleed($bleed)
    {
        $this->container['bleed'] = $bleed;

        return $this;
    }


    /**
     * Gets file_original_url
     *
     * @return string|null
     */
    public function getFileOriginalUrl()
    {
        return $this->container['file_original_url'];
    }

    /**
     * Sets file_original_url
     *
     * @param string|null $file_original_url file_original_url
     *
     * @return self
     */
    public function setFileOriginalUrl($file_original_url)
    {
        $this->container['file_original_url'] = $file_original_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


