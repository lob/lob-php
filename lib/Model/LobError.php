<?php
/**
 * LobError
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LobError Class Doc Comment
 *
 * @category Class
 * @description Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LobError implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'lob_error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message' => 'string',
        'status_code' => 'int',
        'code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message' => null,
        'status_code' => null,
        'code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'status_code' => 'status_code',
        'code' => 'code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'status_code' => 'setStatusCode',
        'code' => 'setCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'status_code' => 'getStatusCode',
        'code' => 'getCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_CODE_401 = 401;
    const STATUS_CODE_403 = 403;
    const STATUS_CODE_404 = 404;
    const STATUS_CODE_413 = 413;
    const STATUS_CODE_422 = 422;
    const STATUS_CODE_429 = 429;
    const STATUS_CODE_500 = 500;
    const CODE_BAD_REQUEST = 'bad_request';
    const CODE_CONFLICT = 'conflict';
    const CODE_FEATURE_LIMIT_REACHED = 'feature_limit_reached';
    const CODE_INTERNAL_SERVER_ERROR = 'internal_server_error';
    const CODE_INVALID = 'invalid';
    const CODE_NOT_DELETABLE = 'not_deletable';
    const CODE_NOT_FOUND = 'not_found';
    const CODE_REQUEST_TIMEOUT = 'request_timeout';
    const CODE_SERVICE_UNAVAILABLE = 'service_unavailable';
    const CODE_UNRECOGNIZED_ENDPOINT = 'unrecognized_endpoint';
    const CODE_UNSUPPORTED_LOB_VERSION = 'unsupported_lob_version';
    const CODE_ADDRESS_LENGTH_EXCEEDS_LIMIT = 'address_length_exceeds_limit';
    const CODE_BANK_ACCOUNT_ALREADY_VERIFIED = 'bank_account_already_verified';
    const CODE_BANK_ERROR = 'bank_error';
    const CODE_CUSTOM_ENVELOPE_INVENTORY_DEPLETED = 'custom_envelope_inventory_depleted';
    const CODE_DELETED_BANK_ACCOUNT = 'deleted_bank_account';
    const CODE_FAILED_DELIVERABILITY_STRICTNESS = 'failed_deliverability_strictness';
    const CODE_FILE_PAGES_BELOW_MIN = 'file_pages_below_min';
    const CODE_FILE_PAGES_EXCEED_MAX = 'file_pages_exceed_max';
    const CODE_FILE_SIZE_EXCEEDS_LIMIT = 'file_size_exceeds_limit';
    const CODE_FOREIGN_RETURN_ADDRESS = 'foreign_return_address';
    const CODE_INCONSISTENT_PAGE_DIMENSIONS = 'inconsistent_page_dimensions';
    const CODE_INVALID_BANK_ACCOUNT = 'invalid_bank_account';
    const CODE_INVALID_BANK_ACCOUNT_VERIFICATION = 'invalid_bank_account_verification';
    const CODE_INVALID_CHECK_INTERNATIONAL = 'invalid_check_international';
    const CODE_INVALID_COUNTRY_COVID = 'invalid_country_covid';
    const CODE_INVALID_FILE = 'invalid_file';
    const CODE_INVALID_FILE_DIMENSIONS = 'invalid_file_dimensions';
    const CODE_INVALID_FILE_DOWNLOAD_TIME = 'invalid_file_download_time';
    const CODE_INVALID_FILE_URL = 'invalid_file_url';
    const CODE_INVALID_IMAGE_DPI = 'invalid_image_dpi';
    const CODE_INVALID_INTERNATIONAL_FEATURE = 'invalid_international_feature';
    const CODE_INVALID_PERFORATION_RETURN_ENVELOPE = 'invalid_perforation_return_envelope';
    const CODE_INVALID_TEMPLATE_HTML = 'invalid_template_html';
    const CODE_MERGE_VARIABLE_REQUIRED = 'merge_variable_required';
    const CODE_MERGE_VARIABLE_WHITESPACE = 'merge_variable_whitespace';
    const CODE_PAYMENT_METHOD_UNVERIFIED = 'payment_method_unverified';
    const CODE_PDF_ENCRYPTED = 'pdf_encrypted';
    const CODE_SPECIAL_CHARACTERS_RESTRICTED = 'special_characters_restricted';
    const CODE_UNEMBEDDED_FONTS = 'unembedded_fonts';
    const CODE_EMAIL_REQUIRED = 'email_required';
    const CODE_INVALID_API_KEY = 'invalid_api_key';
    const CODE_PUBLISHABLE_KEY_NOT_ALLOWED = 'publishable_key_not_allowed';
    const CODE_RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded';
    const CODE_UNAUTHORIZED = 'unauthorized';
    const CODE_UNAUTHORIZED_TOKEN = 'unauthorized_token';
    const CODE_CARD_QUANTITY_BELOW_MIN = 'card_quantity_below_min';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_401,
            self::STATUS_CODE_403,
            self::STATUS_CODE_404,
            self::STATUS_CODE_413,
            self::STATUS_CODE_422,
            self::STATUS_CODE_429,
            self::STATUS_CODE_500,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_BAD_REQUEST,
            self::CODE_CONFLICT,
            self::CODE_FEATURE_LIMIT_REACHED,
            self::CODE_INTERNAL_SERVER_ERROR,
            self::CODE_INVALID,
            self::CODE_NOT_DELETABLE,
            self::CODE_NOT_FOUND,
            self::CODE_REQUEST_TIMEOUT,
            self::CODE_SERVICE_UNAVAILABLE,
            self::CODE_UNRECOGNIZED_ENDPOINT,
            self::CODE_UNSUPPORTED_LOB_VERSION,
            self::CODE_ADDRESS_LENGTH_EXCEEDS_LIMIT,
            self::CODE_BANK_ACCOUNT_ALREADY_VERIFIED,
            self::CODE_BANK_ERROR,
            self::CODE_CUSTOM_ENVELOPE_INVENTORY_DEPLETED,
            self::CODE_DELETED_BANK_ACCOUNT,
            self::CODE_FAILED_DELIVERABILITY_STRICTNESS,
            self::CODE_FILE_PAGES_BELOW_MIN,
            self::CODE_FILE_PAGES_EXCEED_MAX,
            self::CODE_FILE_SIZE_EXCEEDS_LIMIT,
            self::CODE_FOREIGN_RETURN_ADDRESS,
            self::CODE_INCONSISTENT_PAGE_DIMENSIONS,
            self::CODE_INVALID_BANK_ACCOUNT,
            self::CODE_INVALID_BANK_ACCOUNT_VERIFICATION,
            self::CODE_INVALID_CHECK_INTERNATIONAL,
            self::CODE_INVALID_COUNTRY_COVID,
            self::CODE_INVALID_FILE,
            self::CODE_INVALID_FILE_DIMENSIONS,
            self::CODE_INVALID_FILE_DOWNLOAD_TIME,
            self::CODE_INVALID_FILE_URL,
            self::CODE_INVALID_IMAGE_DPI,
            self::CODE_INVALID_INTERNATIONAL_FEATURE,
            self::CODE_INVALID_PERFORATION_RETURN_ENVELOPE,
            self::CODE_INVALID_TEMPLATE_HTML,
            self::CODE_MERGE_VARIABLE_REQUIRED,
            self::CODE_MERGE_VARIABLE_WHITESPACE,
            self::CODE_PAYMENT_METHOD_UNVERIFIED,
            self::CODE_PDF_ENCRYPTED,
            self::CODE_SPECIAL_CHARACTERS_RESTRICTED,
            self::CODE_UNEMBEDDED_FONTS,
            self::CODE_EMAIL_REQUIRED,
            self::CODE_INVALID_API_KEY,
            self::CODE_PUBLISHABLE_KEY_NOT_ALLOWED,
            self::CODE_RATE_LIMIT_EXCEEDED,
            self::CODE_UNAUTHORIZED,
            self::CODE_UNAUTHORIZED_TOKEN,
            self::CODE_CARD_QUANTITY_BELOW_MIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message'] = $data['message'] ?? null;
        $this->container['status_code'] = $data['status_code'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['status_code']) && !in_array($this->container['status_code'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'status_code', must be one of '%s'",
                    $this->container['status_code'],
                    implode("', '", $allowedValues)
                );
            }
        }

        $allowedValues = $this->getCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
                $invalidProperties[] = sprintf(
                    "invalid value '%s' for 'code', must be one of '%s'",
                    $this->container['code'],
                    implode("', '", $allowedValues)
                );
            }
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message A human-readable message with more details about the error
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }


    /**
     * Gets status_code
     *
     * @return int|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int|null $status_code A conventional HTTP status code.
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($status_code) && !in_array($status_code, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'status_code', must be one of '%s'",
                        $status_code,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['status_code'] = $status_code;

        return $this;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code A pre-defined string identifying an error.
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!method_exists($this, 'getId') || (!empty($this->getId()) && strpos($this->getId(), "fakeId") === False)) {
            if (!is_null($code) && !in_array($code, $allowedValues, true)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Invalid value '%s' for 'code', must be one of '%s'",
                        $code,
                        implode("', '", $allowedValues)
                    )
                );
            }
        }

        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


