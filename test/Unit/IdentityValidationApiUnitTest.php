<?php
/**
 * IdentityValidationApiUnitTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;

use OpenAPI\Client\Api\IdentityValidationApi;
use OpenAPI\Client\Model\IdentityValidation;
use \OpenAPI\Client\Model\MultiLineAddress;
use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;

/**
 * IdentityValidationApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class IdentityValidationApiUnitTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $mockVerificationId;
    private static $mockMultiLineAddress;
    private static $mockIdentityValidationResponse;

    // set up constant fixtures
    public function setUp(): void
    {
        self::$config = new Configuration();
        self::$config->setApiKey('basic', 'Totally Fake Key');

        self::$mockVerificationId = "id_validation_fakeId";
        self::$mockMultiLineAddress = new MultiLineAddress();
        self::$mockIdentityValidationResponse = new IdentityValidation();
        self::$mockIdentityValidationResponse->setId(self::$mockVerificationId);
    }

    /**
     * @group unit
     * @group identityValidation
     */
    public function testValidateConnectionError()
    {
        $guzzleMock = new MockHandler([
            new ConnectException("Server refused connection", new Request("POST", "test"))
        ]);
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $api = new IdentityValidationApi(self::$config, $client);

        try {
            $this->expectException(\Exception::class);
            $this->expectExceptionMessageMatches("/Server refused connection/");
            $api->validate(self::$mockMultiLineAddress);
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group unit
     * @group identityValidation
     */
    public function testValidate()
    {
        $guzzleMock = new MockHandler([
            new Response(200, [], self::$mockIdentityValidationResponse)
        ]);
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $api = new IdentityValidationApi(self::$config, $client);

        try {
            $happyPath = $api->validate(self::$mockMultiLineAddress);
            $this->assertEquals($happyPath->getId(), self::$mockVerificationId);
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group unit
     * @group identityValidation
     */
    public function testValidateFailBadParameter()
    {
        $guzzleMock = new MockHandler([
            new ApiException("forced error", 422)
        ]);
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $api = new IdentityValidationApi(self::$config, $client);

        try {
            $this->expectException(\Exception::class);
            $this->expectExceptionMessageMatches("/Missing the required parameter/");
            $api->validate(null);
        } catch (\Exception $e) {
            echo $e->getCode();
            throw new \Exception($e->getMessage());
        }
    }
}
