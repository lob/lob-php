<?php
/**
 * IntlVerificationsApiUnitTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;

use OpenAPI\Client\Api\IntlVerificationsApi;
use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use OpenAPI\Client\Model\IntlVerificationsPayload;
use OpenAPI\Client\Model\IntlVerificationWritable;
use OpenAPI\Client\Model\MultipleComponentsIntl;
use OpenAPI\Client\Model\IntlVerification;
use OpenAPI\Client\Model\IntlVerificationOrError;
use OpenAPI\Client\Model\IntlVerifications;
use PHPUnit\Framework\TestCase;



/**
 * IntlVerificationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class IntlVerificationsApiUnitTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $mockVerificationId;
    private static $mockVerificationWritable;
    private static $mockIntlVerificationResponse;

    private static $mockMultipleComponentsList;
    private static $mockIntlVerificationBulkResponse;

    // set up constant fixtures
    public function setUp(): void
    {
        self::$mockVerificationId = "intl_ver_fakeId";
        self::$mockVerificationWritable = new IntlVerificationWritable();
        self::$mockIntlVerificationResponse = new IntlVerification();
        self::$mockIntlVerificationResponse->setId(self::$mockVerificationId);

        // Bulk Fixture
        $item1 = new MultipleComponentsIntl();
        $item2 = new MultipleComponentsIntl();
        $item3 = new MultipleComponentsIntl();
        $item1->setPrimaryLine("123 street");
        $item2->setPrimaryLine("456 street");
        $item3->setPrimaryLine("789 street");

        self::$mockMultipleComponentsList = new IntlVerificationsPayload();
        self::$mockMultipleComponentsList->setAddresses([$item1, $item2, $item3]);
        $resp1 = new IntlVerificationOrError();
        $resp2 = new IntlVerificationOrError();
        $resp3 = new IntlVerificationOrError();
        $resp1->setPrimaryLine("123 street");
        $resp2->setPrimaryLine("456 street");
        $resp3->setPrimaryLine("789 street");
        self::$mockIntlVerificationBulkResponse = new IntlVerifications();
        self::$mockIntlVerificationBulkResponse->setAddresses(array ($resp1, $resp2, $resp3));

    }

    /** ***** ***** *****
     * verifyBulk
     * ***** ***** *****/

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testBulkConnectionError()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new ConnectException("Server refused connection", new Request("POST", "test")));
        try {
            $this->expectException(ApiException::class);
            $this->expectExceptionMessageMatches("/Server refused connection/");
            $unhappyPath = $verificationsApi->verifySingle(self::$mockVerificationWritable);
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testBulk()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(200, [], self::$mockIntlVerificationBulkResponse));
        try {
            $happyPath = $verificationsApi->verifyBulk(self::$mockMultipleComponentsList);
            $addresses = $happyPath->getAddresses();
            $this->assertEquals(3, count($addresses));
            $this->assertEquals($addresses[0]->getPrimaryLine(), "123 street");
            $this->assertEquals($addresses[1]->getPrimaryLine(), "456 street");
            $this->assertEquals($addresses[2]->getPrimaryLine(), "789 street");
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testBulkApiError()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(401, [], "{ \"error\": { \"message\": \"blah\", \"status_code\": 422, \"code\": \"invalid\" } }"));
        try {
            $this->expectException(ApiException::class);
            $this->expectExceptionMessageMatches("/blah/");
            $errorResponse = $verificationsApi->verifyBulk(self::$mockMultipleComponentsList);
        } catch (Exception $deleteError) {
            echo 'Caught exception: ', $deleteError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testBulkFailStatusCode()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(300, [], "{ \"error\": { \"message\": \"blah\", \"status_code\": 300, \"code\": \"invalid\" } }"));
        try {
            $this->expectException(ApiException::class);
            $errorResponse = $verificationsApi->verifyBulk(self::$mockMultipleComponentsList);
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /** ***** ***** *****
     * verifySingle
     * ***** ***** *****/

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testSingleConnectionError()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new ConnectException("Server refused connection", new Request("POST", "test")));
        try {
            $this->expectException(ApiException::class);
            $this->expectExceptionMessageMatches("/Server refused connection/");
            $unhappyPath = $verificationsApi->verifySingle(self::$mockVerificationWritable);
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testSingle()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(200, [], self::$mockIntlVerificationResponse));
        try {
            $happyPath = $verificationsApi->verifySingle(self::$mockVerificationWritable);
            $this->assertEquals($happyPath->getId(), self::$mockVerificationId);
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testSingleFailNullId()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        try {
            $this->expectException(\InvalidArgumentException::class);
            $unhappyPath = $verificationsApi->verifySingle(null);
        } catch (Exception $retrieveError) {
            echo 'Caught exception: ',  $creationError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testSingleApiError()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(401, [], "{ \"error\": { \"message\": \"blah\", \"status_code\": 422, \"code\": \"invalid\" } }"));
        try {
            $this->expectException(ApiException::class);
            $this->expectExceptionMessageMatches("/blah/");
            $errorResponse = $verificationsApi->verifySingle(self::$mockVerificationWritable);
        } catch (Exception $deleteError) {
            echo 'Caught exception: ', $deleteError->getMessage(), "\n";
        }
    }

    /**
     * @group unit
     * @group intlVerifications
     */
    public function testSingleFailStatusCode()
    {
        $guzzleMock = new MockHandler();
        $handlerStack = HandlerStack::create($guzzleMock);
        $client = new Client(['handler' => $handlerStack]);
        $config = new Configuration();
        $config->setApiKey('basic', 'Totally Fake Key');
        $verificationsApi = new IntlVerificationsApi($config, $client);

        $guzzleMock->append(new Response(300, [], "{ \"error\": { \"message\": \"blah\", \"status_code\": 300, \"code\": \"invalid\" } }"));
        try {
            $this->expectException(ApiException::class);
            $errorResponse = $verificationsApi->verifySingle(self::$mockVerificationWritable);
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

}
