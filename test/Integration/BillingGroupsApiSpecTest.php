<?php
/**
 * BillingGroupsApiSpecTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Model\BillingGroupEditable;
use \OpenAPI\Client\Api\BillingGroupsApi;
use \OpenAPI\Client\Model\SortByDateModified;
use \OpenAPI\Client\Model\SortBy3;

/**
 * BillingGroupsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class BillingGroupsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $billingApi;
    private static $invalidBillingApi;
    private static $editableBillingGroup;
    private static $errorBillingGroup;
    private static $bg1;
    private static $bg2;
    private static $bg3;

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of BillingGroupsApi
        self::$config = new Configuration();
        self::$config->setApiKey("basic", getenv("LOB_API_TEST_KEY"));
        self::$billingApi = new BillingGroupsApi(self::$config);

        $invalidConfig = new Configuration();
        $invalidConfig->setApiKey("basic", "Totally Fake Key");
        self::$invalidBillingApi = new BillingGroupsApi($invalidConfig);

        self::$editableBillingGroup = new BillingGroupEditable();
        self::$editableBillingGroup->setDescription("Dummy Billing Group (Integration Test)");
        self::$editableBillingGroup->setName("Test Billing Group 0");

        self::$errorBillingGroup = new BillingGroupEditable();
        self::$errorBillingGroup->setDescription("Error Dummy Billing Group (Integration Test)");

        // for List
        self::$bg1 = new BillingGroupEditable();
        self::$bg1->setDescription("Dummy Billing Group (Integration Test)");
        self::$bg1->setName("Test Billing Group 1");

        self::$bg2 = new BillingGroupEditable();
        self::$bg2->setDescription("Dummy Billing Group (Integration Test)");
        self::$bg2->setName("Test Billing Group 2");

        self::$bg3 = new BillingGroupEditable();
        self::$bg3->setDescription("Dummy Billing Group (Integration Test)");
        self::$bg3->setName("Test Billing Group 3");
    }

    public function testBillingGroupsApiInstantiation200() {
        $bgApi200 = new BillingGroupsApi(self::$config);
        $this->assertEquals(gettype($bgApi200), "object");
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testCreate200()
    {
        try {
            $createdBillingGroup = self::$billingApi->create(self::$editableBillingGroup);
            $this->assertMatchesRegularExpression("/bg_/", $createdBillingGroup->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group billingGroups
     */
    // does not include required field in request
    public function testCreate422()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/name is required/");
        $errorResponse = self::$billingApi->create(self::$errorBillingGroup);
    }

    /**
     * @group integration
     * @group billingGroups
     */
    // uses a bad key to attempt to send a request
    public function testBillingGroupApi401() {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $errorResponse = self::$invalidBillingApi->create(self::$editableBillingGroup);
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testGet200()
    {
        try {
            $createdBillingGroup = self::$billingApi->create(self::$editableBillingGroup);
            $retrievedBillingGroup = self::$billingApi->get($createdBillingGroup->getId());
            $this->assertEquals($createdBillingGroup->getDescription(), $retrievedBillingGroup->getDescription());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testGet404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/billing_group not found/");
        $badRetrieval = self::$billingApi->get("bg_NONEXISTENT");
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testUpdate200()
    {
        try {
            $bgUpdatable = new BillingGroupEditable();
            $bgUpdatable->setDescription("Updated Billing Group");
            $createdBillingGroup = self::$billingApi->create(self::$editableBillingGroup);
            $retrievedBillingGroup = self::$billingApi->update($createdBillingGroup->getId(), $bgUpdatable);
            $this->assertEquals("Updated Billing Group", $retrievedBillingGroup->getDescription());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testUpdate404()
    {
        $bgUpdatable = new BillingGroupEditable();
        $bgUpdatable->setDescription("Updated Billing Group");
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/billing_group not found/");
        $retrievedBillingGroup = self::$billingApi->update("bg_fakeId", $bgUpdatable);
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testUpdate0()
    {
        $createdBillingGroup = self::$billingApi->create(self::$editableBillingGroup);
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessageMatches("/Missing the required parameter/");
        $retrievedBillingGroup = self::$billingApi->update($createdBillingGroup->getId(), null);
    }

    /**
     * @group integration
     * @group billingGroups
     */
    public function testList200()
    {
        try {
            $billing1 = self::$billingApi->create(self::$bg1);
            $billing2 = self::$billingApi->create(self::$bg2);
            $billing3 = self::$billingApi->create(self::$bg3);
            $listedBillingGroups = self::$billingApi->list(3);
            $this->assertGreaterThan(1, count($listedBillingGroups->getData()));
            $this->assertLessThanOrEqual(3, count($listedBillingGroups->getData()));
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    public function provider()
    {
        date_default_timezone_set('America/Los_Angeles');
        $date_str = date("Y-m-d", strtotime("-1 months"));
        $date_obj = (object) array("gt" => $date_str);

        return array(
            array(null, 1, null, null, null, null),
            array(null, null, null, $date_obj, null, null),
            array(null, null, null, null, $date_obj, null),
            array(null, null, null, null, null, new SortBy3(array("date_created" => SortBy3::DATE_CREATED_ASC))),
        );
    }

    /**
     * @group integration
     * @group billingGroups
     * @dataProvider provider
     */
    public function testListWithParams($limit, $offset, $include, $date_created, $date_modified, $sort_by)
    {
        try {
            // create billing groups to list
            $billing1 = self::$billingApi->create(self::$bg1);
            $billing2 = self::$billingApi->create(self::$bg2);
            $billing3 = self::$billingApi->create(self::$bg3);
            $listedBillingGroups = self::$billingApi->list($limit, $offset, $include, $date_created, $date_modified, $sort_by);

            $this->assertGreaterThan(0, $listedBillingGroups->getCount());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }
}
