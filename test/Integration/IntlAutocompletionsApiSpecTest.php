<?php
/**
 * IntlAutocompletionsApiSpecTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Api\IntlAutocompletionsApi;
use \OpenAPI\Client\Model\IntlAutocompletionsWritable;

/**
 * IntlAutocompletionsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class IntlAutocompletionsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $intlAutocompletionApi;
    private static $autocompletionWritable;

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of IntlAutocompletionsApiSpecTest & an editable address for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_LIVE_KEY'));
        self::$intlAutocompletionApi = new IntlAutocompletionsApi(self::$config);

        self::$autocompletionWritable = new IntlAutocompletionsWritable();
        self::$autocompletionWritable->setAddressPrefix("35 T");
        self::$autocompletionWritable->setCity("LONDON");
        self::$autocompletionWritable->setZipCode("EC3N 4DR");
        self::$autocompletionWritable->setCountry("GB");
    }

    /**
     * @group integration
     * @group intlAutocompletions
     */
    public function testIntlAutocompletionsApiInstantiation200() {
        try {
            $intlAutocompletionApi = new IntlAutocompletionsApi(self::$config);
            $this->assertEquals(gettype($intlAutocompletionApi), 'object');
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlAutocompletions
     */
    public function testIntlAutocompletion()
    {
        try {
            $intlAutocompletionObject = self::$intlAutocompletionApi->autocomplete(self::$autocompletionWritable);
            // $this->assertMatchesRegularExpression('/intl_auto_/', $intlAutocompletionObject->getId()); // will re-add once bug in API is addressed:
            $this->assertGreaterThan(0, count($intlAutocompletionObject->getSuggestions()));
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlAutocompletions
     */
    public function testIntlAutocompletionTestKey()
    {
        try {
            $testAutocompletion = new IntlAutocompletionsWritable();
            $testAutocompletion->setAddressPrefix("35 T");
            $testAutocompletion->setZipCode("EC3N 4DR");
            $testAutocompletion->setCountry("GB");

            $wrongConfig = new Configuration();
            $wrongConfig->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
            $autocompletionApiError = new IntlAutocompletionsApi($wrongConfig);

            $intlAutocompletionObject = $autocompletionApiError->autocomplete($testAutocompletion);
            $this->assertEquals("TEST KEYS DO NOT AUTOCOMPLETE INTL ADDRESSES", $intlAutocompletionObject->getSuggestions()[0]->getPrimaryLine());

        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlAutocompletions
     */
    public function testIntlAutocompletionError()
    {
        try {
            // error autocompletion object
            $errorAutocompletion = new IntlAutocompletionsWritable();
            $errorAutocompletion->setCity("LONDON");
            $errorAutocompletion->setZipCode("EC3N 4DR");
            $errorAutocompletion->setCountry("GB");

            $this->expectException(ApiException::class);
            $this->expectExceptionMessageMatches("/address_prefix is required/");
            $errorResponse = self::$intlAutocompletionApi->autocomplete($errorAutocompletion);
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }
}
