<?php
/**
 * IdentityValidationApiSpecTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Api\IdentityValidationApi;
use \OpenAPI\Client\Model\IdentityValidation;
use \OpenAPI\Client\Model\MultiLineAddress;

/**
 * IdentityValidationApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class IdentityValidationApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $identityValidationApi;
    private static $cityStateMultiLineAddress;

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of IdentityValidationApi & an editable address for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_LIVE_KEY'));
        self::$identityValidationApi = new IdentityValidationApi(self::$config);

        self::$cityStateMultiLineAddress = new MultiLineAddress();
        self::$cityStateMultiLineAddress->setRecipient("Lob.com");
        self::$cityStateMultiLineAddress->setPrimaryLine("210 King St");
        self::$cityStateMultiLineAddress->setCity("San Francisco");
        self::$cityStateMultiLineAddress->setState("CA");
    }

    /**
     * @group integration
     * @group identityValidation
     */
    public function testIdentityValidationApiInstantiation200() {
        try {
            $identityValidationApi = new IdentityValidationApi(self::$config);
            $this->assertEquals(gettype($identityValidationApi), 'object');
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group identityValidation
     */
    public function testIdentityValidationWithCityState()
    {
        try {
            $identityValidationObject = self::$identityValidationApi->validate(self::$cityStateMultiLineAddress);
            $this->assertMatchesRegularExpression('/id_validation_/', $identityValidationObject->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group identityValidation
     */
    public function testIdentityValidationWithZipCode()
    {
        $zipCodeMultiLineAddress = new MultiLineAddress();
        $zipCodeMultiLineAddress->setRecipient("Lob.com");
        $zipCodeMultiLineAddress->setPrimaryLine("210 King St");
        $zipCodeMultiLineAddress->setZipCode("94107");

        try {
            $identityValidationObject = self::$identityValidationApi->validate($zipCodeMultiLineAddress);
            $this->assertMatchesRegularExpression('/id_validation_/', $identityValidationObject->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group identityValidation
     */
    public function testIdentityValidationTestKey()
    {
        try {
            $testConfig = new Configuration();
            $testConfig->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
            $testApi = new IdentityValidationApi($testConfig);

            $identityValidationObject = $testApi->validate(self::$cityStateMultiLineAddress);
            $this->assertEquals("TEST KEYS DO NOT VERIFY ADDRESSES", $identityValidationObject->getRecipient());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group identityValidation
     */
    public function testIdentityValidationBadParameter()
    {
        try {
            // error validation object
            $invalidAddress = new MultiLineAddress();
            $invalidAddress->setPrimaryLine("210 King St");
            $invalidAddress->setZipCode("94107");

            $this->expectException(\Exception::class);
            $this->expectExceptionMessageMatches("/recipient is required/");
            $errorResponse = self::$identityValidationApi->validate($invalidAddress);
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }
}
