<?php
/**
 * CampaignsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Model\CampaignWritable;
use \OpenAPI\Client\Model\CampaignUpdatable;
use \OpenAPI\Client\Model\CmpScheduleType;
use \OpenAPI\Client\Model\CampaignsList;
use \OpenAPI\Client\Api\CampaignsApi;

/**
 * CampaignsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class CampaignsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $campaignApi;
    private static $campaign1;
    private static $campaign2;
    private static $campaign3;

    // for teardown post-testing
    private $idsForCleanup = [];

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of CampaignsApi & an editable campaign for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
        self::$campaignApi = new CampaignsApi(self::$config);

        // for List
        self::$campaign1 = new CampaignWritable();
        self::$campaign1->setName("PHP Integration Test Campaign 1");
        self::$campaign1->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        self::$campaign2 = new CampaignWritable();
        self::$campaign2->setName("PHP Integration Test Campaign 2");
        self::$campaign2->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        self::$campaign3 = new CampaignWritable();
        self::$campaign3->setName("PHP Integration Test Campaign 3");
        self::$campaign3->setScheduleType(CmpScheduleType::IMMEDIATE->value);
    }

    public function tearDown(): void
    {
        foreach ($this->idsForCleanup as $id) {
            self::$campaignApi->delete($id);
        }
    }

     /**
     * @group integration
     * @group campaigns
     */
    public function testCampaignsApiInstantiation200() {
        try {
            $campaignApi200 = new CampaignsApi(self::$config);
            $this->assertEquals(gettype($campaignApi200), 'object');
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testCreate200()
    {
        $writableCampaign = new CampaignWritable();
        $writableCampaign->setName("PHP Integration Test Campaign A");
        $writableCampaign->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        try {
            $createdCampaign = self::$campaignApi->create($writableCampaign);
            $this->assertMatchesRegularExpression('/cmp_/', $createdCampaign->getId());
            array_push($this->idsForCleanup, $createdCampaign->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    // does not include required field in request
    public function testCreate422()
    {
        $errorCampaign = new CampaignWritable();
        $errorCampaign->setName("Error Campaign (No Schedule Type)");

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/schedule_type is required/");
        $errorResponse = self::$campaignApi->create($errorCampaign);
    }

    /**
     * @group integration
     * @group campaigns
     */
    // uses a bad key to attempt to send a request
    public function testCampaignApi401() {
        $writableCampaign = new CampaignWritable();
        $writableCampaign->setName("PHP Integration Test Campaign");
        $writableCampaign->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        $wrongConfig = new Configuration();
        $wrongConfig->setApiKey('basic', 'BAD KEY');
        $campaignApiError = new CampaignsApi($wrongConfig);

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $errorResponse = $campaignApiError->create($writableCampaign);
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testGet200()
    {
        $writableCampaign = new CampaignWritable();
        $writableCampaign->setName("PHP Integration Test Campaign B");
        $writableCampaign->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        try {
            $createdCampaign = self::$campaignApi->create($writableCampaign);
            $retrievedCampaign = self::$campaignApi->get($createdCampaign->getId());
            $this->assertEquals($createdCampaign->getDescription(), $retrievedCampaign->getDescription());
            array_push($this->idsForCleanup, $createdCampaign->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testGet404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/campaign not found/");
        $badRetrieval = self::$campaignApi->get("cmp_NONEXISTENT");
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testUpdate200()
    {
        $writableCampaign = new CampaignWritable();
        $writableCampaign->setName("PHP Integration Test Campaign C");
        $writableCampaign->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        try {
            $campaignUpdate = new CampaignUpdatable();
            $campaignUpdate->setDescription("Updated Campaign");
            $createdCampaign = self::$campaignApi->create($writableCampaign);
            $retrievedCampaign = self::$campaignApi->update($createdCampaign->getId(), $campaignUpdate);
            $this->assertEquals("Updated Campaign", $retrievedCampaign->getDescription());
            array_push($this->idsForCleanup, $createdCampaign->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testList200()
    {
        $nextUrl = "";
        $previousUrl = "";
        try {
            $cmp1 = self::$campaignApi->create(self::$campaign1);
            $cmp2 = self::$campaignApi->create(self::$campaign2);
            $cmp3 = self::$campaignApi->create(self::$campaign3);
            $listedCampaigns = self::$campaignApi->list(3);
            $this->assertGreaterThan(1, count($listedCampaigns->getData()));
            $this->assertLessThanOrEqual(3, count($listedCampaigns->getData()));
            $nextUrl = substr($listedCampaigns->getNextUrl(), strrpos($listedCampaigns->getNextUrl(), "after=") + 6);
            $this->assertIsString($nextUrl);
            array_push($this->idsForCleanup, $cmp1->getId());
            array_push($this->idsForCleanup, $cmp2->getId());
            array_push($this->idsForCleanup, $cmp3->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }

        // response using nextUrl
        if ($nextUrl != "") {
            try {
                $listedCampaignsAfter = self::$campaignApi->list(3, null, null, $nextUrl);
                $this->assertGreaterThan(1, count($listedCampaignsAfter->getData()));
                $this->assertLessThanOrEqual(3, count($listedCampaignsAfter->getData()));
                $previousUrl = substr($listedCampaignsAfter->getPreviousUrl(), strrpos($listedCampaignsAfter->getPreviousUrl(), "before=") + 7);
                $this->assertIsString($previousUrl);
            } catch (\Exception $e) {
                echo 'Caught exception: ',  $e->getMessage(), "\n";
            }
        }

        // response using previousUrl
        if ($previousUrl != "") {
            try {
                $listedCampaignsBefore = self::$campaignApi->list(3, null, $previousUrl);
                $this->assertGreaterThan(1, count($listedCampaignsBefore->getData()));
                $this->assertLessThanOrEqual(3, count($listedCampaignsBefore->getData()));
            } catch (\Exception $e) {
                echo 'Caught exception: ',  $e->getMessage(), "\n";
            }
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testDelete200()
    {
        $writableCampaign = new CampaignWritable();
        $writableCampaign->setName("PHP Integration Test Campaign D");
        $writableCampaign->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        try {
            $createdCampaign = self::$campaignApi->create($writableCampaign);
            $deletedCampaign = self::$campaignApi->delete($createdCampaign->getId());
            $this->assertEquals(true, $deletedCampaign->getDeleted());
            $this->assertMatchesRegularExpression('/cmp_/', $deletedCampaign->getId());
        } catch (\Exception $deleteError) {
            echo 'Caught exception: ',  $deleteError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group campaigns
     */
    public function testDelete404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/campaign not found/");
        $badDeletion = self::$campaignApi->delete("cmp_NONEXISTENT");
    }
}
