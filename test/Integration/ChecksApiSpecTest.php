<?php
/**
 * ChecksApiSpecTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Api\ChecksApi;
use \OpenAPI\Client\Model\AddressDomestic;
use \OpenAPI\Client\Model\CheckEditable;
use \OpenAPI\Client\Api\AddressesApi;
use \OpenAPI\Client\Model\BankTypeEnum;
use \OpenAPI\Client\Model\BankAccountWritable;
use \OpenAPI\Client\Model\BankAccountVerify;
use \OpenAPI\Client\Api\BankAccountsApi;
use \OpenAPI\Client\Model\MailType;
use \OpenAPI\Client\Model\SortBy5;

/**
 * AddressesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class ChecksApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $addressApi;
    private static $bankApi;
    private static $checksApi;
    private static $invalidChecksApi;
    private static $editableCheck;
    private static $editableCheck2;
    private static $errorCheck;
    private static $metadata;

    // for teardown post-testing
    private $idsForCleanup = [];
    private static $toAddress;
    private static $fromAddress;
    private static $toAddress2;
    private static $fromAddress2;
    private static $bankId;

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        self::$config = new Configuration();
        self::$config->setApiKey("basic", getenv("LOB_API_TEST_KEY"));

        // create bank account to use for tests
        self::$bankApi = new BankAccountsApi(self::$config);

        $writableBankAcc = new BankAccountWritable();
        $writableBankAcc->setDescription("PHP test bank account");
        $writableBankAcc->setRoutingNumber("322271627");
        $writableBankAcc->setAccountNumber("123456789");
        $writableBankAcc->setSignatory("Sinead Connor");
        $writableBankAcc->setAccountType(BankTypeEnum::INDIVIDUAL->value);

        $bankAccount = self::$bankApi->create($writableBankAcc);
        self::$bankId = $bankAccount->getId();
        $bankVerify = new BankAccountVerify();
        $bankVerify->setAmounts([11, 35]);

        self::$bankApi->verify(self::$bankId, $bankVerify);

        // create instance of AddressesApi & checks to use for tests
        self::$addressApi = new AddressesApi(self::$config);

        $address1 = new AddressDomestic();
        $address1->setName("THING T. THING");
        $address1->setAddressLine1("1313 CEMETERY LN");
        $address1->setAddressCity("WESTFIELD");
        $address1->setAddressState("NJ");
        $address1->setAddressZip("07000");

        $address2 = new AddressDomestic();
        $address2->setName("FESTER");
        $address2->setAddressLine1("001 CEMETERY LN");
        $address2->setAddressLine2("SUITE 666");
        $address2->setAddressCity("WESTFIELD");
        $address2->setAddressState("NJ");
        $address2->setAddressZip("07000");

        self::$toAddress = self::$addressApi->create($address1);
        self::$fromAddress = self::$addressApi->create($address2);

        $address3 = new AddressDomestic();
        $address3->setName("MORTICIA ADDAMS");
        $address3->setAddressLine1("1212 CEMETERY LN");
        $address3->setAddressCity("WESTFIELD");
        $address3->setAddressState("NJ");
        $address3->setAddressZip("07000");

        $address4 = new AddressDomestic();
        $address4->setName("COUSIN ITT");
        $address4->setAddressLine1("1515 CEMETERY LN");
        $address4->setAddressLine2("FLOOR 0");
        $address4->setAddressCity("WESTFIELD");
        $address4->setAddressState("NJ");
        $address4->setAddressZip("07000");

        self::$toAddress2 = self::$addressApi->create($address3);
        self::$fromAddress2 = self::$addressApi->create($address4);

        // create new instance of ChecksApi to use in other tests
        self::$checksApi = new ChecksApi(self::$config);

        $invalidConfig = new Configuration();
        $invalidConfig->setApiKey("basic", "Totally Fake Key");
        self::$invalidChecksApi = new ChecksApi($invalidConfig);

        // create editable check
        self::$editableCheck = new CheckEditable();
        self::$editableCheck->setTo(self::$toAddress->getId());
        self::$editableCheck->setFrom(self::$fromAddress->getId());
        self::$editableCheck->setAmount(100);
        self::$editableCheck->setBankAccount(self::$bankId);
        self::$editableCheck->setDescription("Dummy Check 1 (Integration Test)");

        // create second editable check
        self::$editableCheck2 = new CheckEditable();
        self::$editableCheck2->setTo(self::$toAddress2->getId());
        self::$editableCheck2->setFrom(self::$fromAddress2->getId());
        self::$editableCheck2->setAmount(200);
        self::$editableCheck2->setBankAccount(self::$bankId);
        self::$editableCheck2->setDescription("Dummy Check 2 (Integration Test)");
        self::$metadata = (object)array("name"=>"Harry");
        self::$editableCheck2->setMetadata(self::$metadata);

        // create error check
        self::$errorCheck = new CheckEditable();
        self::$errorCheck->setFrom(self::$fromAddress->getId());
        self::$errorCheck->setAmount(200);
        self::$errorCheck->setBankAccount(self::$bankId);
        self::$errorCheck->setDescription("Dummy Check (Integration Test)");
    }

    public function tearDown(): void
    {
        foreach ($this->idsForCleanup as $id) {
            self::$checksApi->cancel($id);
        }
    }

    public static function tearDownAfterClass(): void {
        self::$addressApi->delete(self::$toAddress->getId());
        self::$addressApi->delete(self::$toAddress2->getId());
        self::$addressApi->delete(self::$fromAddress->getId());
        self::$addressApi->delete(self::$fromAddress2->getId());
        self::$bankApi->delete(self::$bankId);
    }

    // include static cleanup for all the checks?
    public function testChecksApiInstantiation200() {
        try {
            $checksApi200 = new ChecksApi(self::$config);
            $this->assertEquals(gettype($checksApi200), "object");
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group checks
     */
    public function testCreate200()
    {
        try {
            $createdCheck = self::$checksApi->create(self::$editableCheck);
            $this->assertMatchesRegularExpression("/chk_/", $createdCheck->getId());
            array_push($this->idsForCleanup, $createdCheck->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @group integration
     * @group checks
     */
    // does not include required field in request
    public function testCreate422()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/to is required/");
        $errorResponse = self::$checksApi->create(self::$errorCheck);
    }

    /**
     * @group integration
     * @group checks
     */
    // uses a bad key to attempt to send a request
    public function testCheckApi401() {
        $wrongConfig = new Configuration();
        $wrongConfig->setApiKey("basic", "BAD KEY");
        $checkApiError = new ChecksApi($wrongConfig);

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $errorResponse = $checkApiError->create(self::$editableCheck);
    }

    /**
     * @group integration
     * @group checks
     */
    public function testGet200()
    {
        try {
            $createdCheck = self::$checksApi->create(self::$editableCheck);
            $retrievedCheck = self::$checksApi->get($createdCheck->getId());
            $this->assertEquals($createdCheck->getTo(), $retrievedCheck->getTo());
            array_push($this->idsForCleanup, $createdCheck->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    public function testGet0()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessageMatches("/Missing the required parameter/");
        $badRetrieval = self::$checksApi->get(null);
    }

    public function testGet401()
    {
        $createdCheck = self::$checksApi->create(self::$editableCheck);
        array_push($this->idsForCleanup, $createdCheck->getId());

        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid/");
        $badRetrieval = self::$invalidChecksApi->get($createdCheck->getId());
    }

    public function testGet404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/check not found/");
        $badRetrieval = self::$checksApi->get("chk_NONEXISTENT");
    }

    /**
     * @group integration
     * @group checks
     */
    public function testList200()
    {
        $nextUrl = "";
        $previousUrl = "";

        try {
            $chk1 = self::$checksApi->create(self::$editableCheck);
            $chk2 = self::$checksApi->create(self::$editableCheck2);
            $listedChecks = self::$checksApi->list(2);
            $this->assertGreaterThan(1, count($listedChecks->getData()));
            $this->assertLessThanOrEqual(2, count($listedChecks->getData()));
            $nextUrl = substr($listedChecks->getNextUrl(), strrpos($listedChecks->getNextUrl(), "after=") + 6);
            $this->assertIsString($nextUrl);
            array_push($this->idsForCleanup, $chk1->getId());
            array_push($this->idsForCleanup, $chk2->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }

        // response using nextUrl
        if ($nextUrl != "") {
            try {
                $chk1 = self::$checksApi->create(self::$editableCheck);
                $chk2 = self::$checksApi->create(self::$editableCheck2);
                $listedChecksAfter = self::$checksApi->list(2, null, $nextUrl);
                $this->assertGreaterThan(1, count($listedChecksAfter->getData()));
                $this->assertLessThanOrEqual(2, count($listedChecksAfter->getData()));
                $previousUrl = substr($listedChecksAfter->getPreviousUrl(), strrpos($listedChecksAfter->getPreviousUrl(), "before=") + 7);
                $this->assertIsString($previousUrl);
                array_push($this->idsForCleanup, $chk1->getId());
                array_push($this->idsForCleanup, $chk2->getId());
            } catch (\Exception $e) {
                throw new \Exception($e->getMessage());
            }
        }

        // response using previousUrl
        if ($previousUrl != "") {
            try {
                $chk1 = self::$checksApi->create(self::$editableCheck);
                $chk2 = self::$checksApi->create(self::$editableCheck2);
                $listedChecksBefore = self::$checksApi->list(2, $previousUrl);
                $this->assertGreaterThan(1, count($listedChecksBefore->getData()));
                $this->assertLessThanOrEqual(2, count($listedChecksBefore->getData()));
                array_push($this->idsForCleanup, $chk1->getId());
                array_push($this->idsForCleanup, $chk2->getId());
            } catch (\Exception $e) {
                throw new \Exception($e->getMessage());
            }
        }
    }

    public function provider()
    {
        date_default_timezone_set('America/Los_Angeles');
        $date_str = date("Y-m-d", strtotime("-1 months"));
        $date_obj = (object) array("gt" => $date_str);

        return array(
            array(null, null, null, array("total_count"), null, null, null, null, null, null), // include
            array(null, null, null, null, $date_obj, null, null, null, null, null), // date_created
            array(null, null, null, null, null, self::$metadata, null, null, null, null), // metadata
            array(null, null, null, null, null, null, TRUE, null, null, null), // scheduled
            array(null, null, null, null, null, null, null, $date_obj, null, null), // send_date
            array(null, null, null, null, null, null, null, null, MailType::FIRST_CLASS->value, null), // mail_type
            array(null, null, null, null, null, null, null, null, null, new SortBy5(array("date_created" => "asc"))) // sort_by
        );
    }

    /**
     * @dataProvider provider
     */
    public function testListWithParams($limit, $before, $after, $include, $date_created, $metadata, $scheduled, $send_date, $mail_type, $sort_by)
    {
        try {
            // create checks to list
            $chk1 = self::$checksApi->create(self::$editableCheck);
            $chk2 = self::$checksApi->create(self::$editableCheck2);
            $listedChecks = self::$checksApi->list($limit, $before, $after, $include, $date_created, $metadata, $scheduled, $send_date, $mail_type, $sort_by);

            $this->assertGreaterThan(0, $listedChecks->getCount());
            if ($include) $this->assertNotNull($listedChecks->getTotalCount());

            // cancel created checks
            array_push($this->idsForCleanup, $chk1->getId());
            array_push($this->idsForCleanup, $chk2->getId());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    public function testCancel200()
    {
        try {
            $createdCheck = self::$checksApi->create(self::$editableCheck);
            $deletedCheck = self::$checksApi->cancel($createdCheck->getId());
            $this->assertEquals(true, $deletedCheck->getDeleted());
        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    public function testCancel401()
    {
        $createdCheck = self::$checksApi->create(self::$editableCheck);
        array_push($this->idsForCleanup, $createdCheck->getId());

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $deletedCheck = self::$invalidChecksApi->cancel($createdCheck->getId());
    }

    public function testCancel404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/check not found/");
        $badDeletion = self::$checksApi->cancel("chk_NONEXISTENT");
    }
}
