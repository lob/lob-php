<?php
/**
 * IntlVerificationsApiSpecTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Api\IntlVerificationsApi;
use \OpenAPI\Client\Model\IntlVerificationWritable;
use \OpenAPI\Client\Model\IntlVerificationsPayload;
use \OpenAPI\Client\Model\MultipleComponentsIntl;

/**
 * IntlVerificationsApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class IntlVerificationsApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $intlvApi200;
    private static $validAddress1;
    private static $validAddress2;
    private static $multipleAddressList;
    private static $undeliverableAddress;

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of IntlVerificationsApiSpecTest & an editable address for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_LIVE_KEY'));
        self::$intlvApi200 = new IntlVerificationsApi(self::$config);

        self::$validAddress1 = new IntlVerificationWritable();
        self::$validAddress1->setPrimaryLine("10 DOWNING ST");
        self::$validAddress1->setCity("LONDON");
        self::$validAddress1->setPostalCode("SW1A 2AA");
        self::$validAddress1->setCountry("GB");

        self::$validAddress2 = new IntlVerificationWritable();
        self::$validAddress2->setPrimaryLine("36 TOWER HILL");
        self::$validAddress2->setCity("LONDON");
        self::$validAddress2->setPostalCode("EC3N 4DR");
        self::$validAddress2->setCountry("GB");

        $mc1 = new MultipleComponentsIntl();
        $mc1->setPrimaryLine("10 DOWNING ST");
        $mc1->setCity("LONDON");
        $mc1->setPostalCode("SW1A 2AA");
        $mc1->setCountry("GB");


        $mc2 = new MultipleComponentsIntl();
        $mc2->setPrimaryLine("1 FAKE POTATO LANE");
        $mc2->setCity("LONDON");
        $mc2->setPostalCode("ZC4Z 46Z");
        $mc2->setCountry("GB");

        // multiple components list for bulk verification test
        self::$multipleAddressList = new IntlVerificationsPayload();
        self::$multipleAddressList->setAddresses([$mc1, $mc2]);

        self::$undeliverableAddress = new IntlVerificationWritable();
        self::$undeliverableAddress->setPrimaryLine("1 CEMETERY ST");
        self::$undeliverableAddress->setCity("POTATOFIELD");
        self::$undeliverableAddress->setPostalCode("EC3N 40R");
        self::$undeliverableAddress->setCountry("GB");
    }

    /**
     * @group integration
     * @group intlVerifications
     */
    public function testIntlVerificationsApiInstantiation200() {
        try {
            $intlvApi200 = new IntlVerificationsApi(self::$config);
            $this->assertEquals(gettype($intlvApi200), 'object');
        } catch (Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlVerifications
     */
    public function testSingleUsVerificationDeliverable()
    {
        try {
            $intlVerificationObject = self::$intlvApi200->verifySingle(self::$validAddress1);
            $this->assertMatchesRegularExpression('/intl_ver_/', $intlVerificationObject->getId());
            $this->assertEquals('deliverable', $intlVerificationObject->getDeliverability());
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlVerifications
     */
    public function testSingleUsVerificationUndeliverable()
    {
        try {
            $intlVerificationObject = self::$intlvApi200->verifySingle(self::$undeliverableAddress);
            $this->assertMatchesRegularExpression('/intl_ver_/', $intlVerificationObject->getId());
            $this->assertEquals('undeliverable', $intlVerificationObject->getDeliverability());

        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlVerifications
     */
    public function testBulkUsVerificationValid()
    {
        try {
            $intlVerificationObject = self::$intlvApi200->verifyBulk(self::$multipleAddressList);
            $this->assertGreaterThan(1, count($intlVerificationObject->getAddresses()));
            $this->assertEquals('deliverable', $intlVerificationObject->getAddresses()[0]->getDeliverability());
            $this->assertEquals('undeliverable', $intlVerificationObject->getAddresses()[1]->getDeliverability());
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group intlVerifications
     */
    public function testBulkUsVerificationError()
    {
        try {
            $mc1 = new MultipleComponentsIntl();
            $mc1->setPrimaryLine("10 DOWNING ST");
            $mc1->setCity("LONDON");
            $mc1->setPostalCode("SW1A 2AA");
            $mc1->setCountry("GB");

            // second entry has nonexistent country, should error
            $mc2 = new MultipleComponentsIntl();
            $mc2->setPrimaryLine("35 TOWER HILL");
            $mc2->setCity("LONDON");
            $mc2->setPostalCode("EC3N 4DR");
            $mc2->setCountry("ZZ");

            // multiple components list for bulk verification test
            $errorAddressList = new IntlVerificationsPayload();
            $errorAddressList->setAddresses([$mc1, $mc2]);

            $errorVerificationObject = self::$intlvApi200->verifyBulk($errorAddressList);

            $this->assertMatchesRegularExpression('/country must be one of/', $errorVerificationObject->getAddresses()[1]->getError()->getError()->getMessage());
            $this->assertEquals(1, $errorVerificationObject->getErrors());
        } catch (Exception $createError) {
            echo 'Caught exception: ',  $createError->getMessage(), "\n";
        }
    }
}
