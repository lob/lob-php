<?php
/**
 * CreativesApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use PHPUnit\Framework\TestCase;
use \OpenAPI\Client\Model\AddressEditable;
use \OpenAPI\Client\Model\CampaignWritable;
use \OpenAPI\Client\Model\CreativeWritable;
use \OpenAPI\Client\Model\TemplateWritable;
use \OpenAPI\Client\Model\CreativePatch;
use \OpenAPI\Client\Model\CmpScheduleType;
use \OpenAPI\Client\Model\PostcardDetailsWritable;
use \OpenAPI\Client\Api\CreativesApi;
use \OpenAPI\Client\Api\CampaignsApi;
use \OpenAPI\Client\Api\TemplatesApi;

/**
 * CreativesApiSpecTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

class CreativesApiSpecTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    private static $config;
    private static $creativeApi;
    private static $campaignApi;
    private static $campaignId;
    private static $templateApi;
    private static $templateId;
    private static $creativeId;
    private static $from;

    // for teardown post-testing
    private $idsForCleanup = [];

    // set up constant fixtures
    public static function setUpBeforeClass(): void
    {
        // create instance of CreativesApi & an editable creative for other tests
        self::$config = new Configuration();
        self::$config->setApiKey('basic', getenv('LOB_API_TEST_KEY'));
        self::$creativeApi = new CreativesApi(self::$config);

        // need to create campaign in order to create attached creative
        $campaignWritable = new CampaignWritable();
        $campaignWritable->setName("PHP Integration Test Creative");
        $campaignWritable->setScheduleType(CmpScheduleType::IMMEDIATE->value);

        self::$campaignApi = new CampaignsApi(self::$config);
        self::$campaignId = self::$campaignApi->create($campaignWritable)->getId();

        // for Retrieve tests
        self::$from = new AddressEditable();
        self::$from->setName("FESTER");
        self::$from->setAddressLine1("001 CEMETERY LN");
        self::$from->setAddressLine2("SUITE 666");
        self::$from->setAddressCity("WESTFIELD");
        self::$from->setAddressState("NJ");
        self::$from->setAddressZip("07000");

        $templateWritable  = new TemplateWritable();
        $templateWritable->setDescription("PHP Integration Test Creative");
        $templateWritable->setHtml("<html>Updated template HTML</html>");

        self::$templateApi = new TemplatesApi(self::$config);
        self::$templateId = self::$templateApi->create($templateWritable)->getId();

        $creativeWritable = new CreativeWritable();
        $creativeWritable->setFrom(self::$from);
        $creativeWritable->setCampaignId(self::$campaignId);
        $creativeWritable->setResourceType("postcard");
        $creativeWritable->setDetails(new PostcardDetailsWritable());
        $creativeWritable->setFront(self::$templateId);
        $creativeWritable->setBack(self::$templateId);

        self::$creativeId = self::$creativeApi->create($creativeWritable)->getId();
    }

    public static function tearDownAfterClass(): void
    {
        self::$templateApi->delete(self::$templateId);
        self::$campaignApi->delete(self::$campaignId);
    }

     /**
     * @group integration
     * @group creatives
     */
    public function testCreativesApiInstantiation200() {
        try {
            $creativeApi200 = new CreativesApi(self::$config);
            $this->assertEquals(gettype($creativeApi200), 'object');
        } catch (\Exception $instantiationError) {
            echo 'Caught exception: ',  $instantiationError->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group creatives
     */
    public function testCreate200()
    {
        $writableCreative = new CreativeWritable();
        $writableCreative->setFrom(self::$from);
        $writableCreative->setCampaignId(self::$campaignId);
        $writableCreative->setResourceType("postcard");
        $writableCreative->setDetails(new PostcardDetailsWritable());
        $writableCreative->setFront(self::$templateId);
        $writableCreative->setBack(self::$templateId);

        try {
            $createdCreative = self::$creativeApi->create($writableCreative);
            $this->assertMatchesRegularExpression('/crv_/', $createdCreative->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group creatives
     */
    // does not include required field in request
    public function testCreate422()
    {
        $errorCreative = new CreativeWritable();
        $errorCreative->setDescription("Error Creative (No Campaign Id)");

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/campaign_id is required/");
        $errorResponse = self::$creativeApi->create($errorCreative);
    }

    /**
     * @group integration
     * @group creatives
     */
    // uses a bad key to attempt to send a request
    public function testCreativeApi401() {
        $writableCreative = new CreativeWritable();
        $writableCreative->setFrom(self::$from);
        $writableCreative->setCampaignId(self::$campaignId);
        $writableCreative->setResourceType("postcard");
        $writableCreative->setDetails(new PostcardDetailsWritable());
        $writableCreative->setFront(self::$templateId);
        $writableCreative->setBack(self::$templateId);

        $wrongConfig = new Configuration();
        $wrongConfig->setApiKey('basic', 'BAD KEY');
        $creativeApiError = new CreativesApi($wrongConfig);

        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/Your API key is not valid. Please sign up on lob.com to get a valid api key./");
        $errorResponse = $creativeApiError->create($writableCreative);
    }

    /**
     * @group integration
     * @group creatives
     */
    public function testGet200()
    {
        try {
            $retrievedCreative = self::$creativeApi->get(self::$creativeId);
            $this->assertEquals(self::$creativeId, $retrievedCreative->getId());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    /**
     * @group integration
     * @group creatives
     */
    public function testGet404()
    {
        $this->expectException(ApiException::class);
        $this->expectExceptionMessageMatches("/creative not found/");
        $badRetrieval = self::$creativeApi->get("crv_NONEXISTENT");
    }

    /**
     * @group integration
     * @group creatives
     */
    public function testUpdate200()
    {
        try {
            $creativeUpdate = new CreativePatch();
            $creativeUpdate->setDescription("Updated Creative");
            $updatedCreative = self::$creativeApi->update(self::$creativeId, $creativeUpdate);
            $this->assertEquals("Updated Creative", $updatedCreative->getDescription());
        } catch (\Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }
}
